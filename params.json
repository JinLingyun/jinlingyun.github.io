{
  "name": "Jinlingyun.GitHub.io",
  "tagline": "技术博客",
  "body": "#使用cocoapods拆分子工程\r\n\r\n* 1.新建project，命名为FFPark，并将其拷贝到主工程中\r\n* 2.子工程中新建pch文件，命名为FFParkPrefixHeader.pch，并将其加入系统pch配置中：\r\n进入子工程配置文件中，Build Settings，搜索header，在precompile prefix header中设置为yes，prefix header中设置为FFPark/FFParkPrefixHeader.pch。如图：\r\n![markdown](http://7xsxl2.com2.z0.glb.clouddn.com/prefixHeader.png)\r\n* 3.子工程中根目录新建FFPark.podspec文件，内容如下：\r\n```javascript\r\nPod::Spec.new do |s|\r\n  s.name     = 'FFPark'\r\n  s.version  = '1.0'\r\n  s.license  = 'WD'\r\n  s.author   = { \"jinlingyun\"=> \"jinlingyun@wanda.cn\" }\r\n  s.requires_arc = true\r\n  s.platform     = :ios, '7.0'\r\n  s.source_files = ['FFPark/**/*.{h,m}']\r\n  s.resources = [\"FFPark/**/*.plist\",\"FFPark/**/*.png\",\"FFPark/**/*.json\",\"FFPark/**/*.xib\",\"FFPark/**/*.storyboard\"]\r\n  s.prefix_header_file = 'FFPark/FFParkPrefixHeader.pch'\r\n\r\n  s.frameworks  = 'QuartzCore'\r\n\r\n  s.dependency 'WDWorkFlow'\r\n  s.dependency 'FFFoundation'\r\n  s.dependency 'WDImageTools'\r\n\r\nend\r\n```\r\n* 4.主工程中修改Podfile文件，在主target中添加：\r\n```javascript\r\npod ‘FFPark’, :path => './FFPark_src'\r\n```\r\n同时添加target :FFPark，如下：\r\n```javascript\r\ntarget :FFPark do\r\n    xcodeproj 'FFPark_src/FFPark'\r\n    link_with \"FFPark\"\r\n    pod 'WDWorkFlow', :path => './WDWorkFlow_src'\r\n    pod 'WDImageTools', :path => './WDImageTools'\r\n    pod 'FFFoundation', :path => './FFFoundation'\r\nend\r\n```\r\n* 5.运行update_pods命令：./update_pods\r\n该命令内容如下：\r\n```bash\r\nps -ef | grep  \"/Applications/Xcode.app/Contents/MacOS/Xcode\" | grep -v grep | awk '{print $2}' | xargs kill -9\r\n\r\npod update --no-repo-update\r\n\r\nls | grep \".xcworkspace\" | xargs open\r\n```\r\n运行之后，可以在Pods子工程中看到FFPark文件夹，该文件夹实际上是子工程FFPark的文件镜像或替身\r\n\r\n* 6.编译子工程\r\n\r\n子工程引用子工程的代码，直接import进来即可，主工程也可以引用子工程的代码\r\n但要子工程引用主工程的代码，则不行，但有两种方法，1使用桥，2使用运行时\r\n\r\n1使用桥，如下示例\r\n\r\n要拆分的子工程中的代码：\r\n```objectivec\r\nRTLbsAnnotation *tapAnnotation = [[RTLbsAnnotation alloc] initWithMapPoint:CGPointMake([manager.fixMemberInfo.fixXCoordinate floatValue], [manager.fixMemberInfo.fixYCoordinate floatValue]) title:@\"\" iconImage:[UIImage imageNamed:@\"car_carposition_icon\"] floorID:floorIndex];\r\n```\r\n而RTLbsAnnotation.h是在主工程中定义的， #import “RTLbsAnnotation.h\"提示找不到RTLbsAnnotation.h这个文件。此时需要在拆分的子工程中添加头文件如 FFParkInterBridge.h，在该头文件中定义：\r\n```objectivec\r\ninterface RTLbsAnnotation : NSObject\r\n- (id) initWithMapPoint: (CGPoint) mapPoint title: (NSString *)title iconImage:(UIImage *) iconImage floorID:(NSString*)floor;\r\nend\r\n```\r\n相当于在主工程和子工程中搭了一座桥，此时注释掉 #import “RTLbsAnnotation.h”，则可以编译通过，运行时会自动找到主工程中的代码来运行\r\n\r\n2使用运行时，如下示例（该方法不推荐，没有经过严格测试，只是说明思路）：\r\n\r\n要拆分的子工程中的代码：\r\n```objectivec\r\n-(void)openWebViewWithURL:(NSString*) url urlSort:(NSString*)urlsort{\r\n    [FFAdvertisementSkipNewViewController nav2NextListViewController:self.controller urlSort:model.urlSort urlContent:model.urlContent];\r\n}\r\n```\r\n而FFAdvertisementSkipNewViewController是在主工程中定义的，则使用如下代码，也可保证编译及运行通过：\r\n```objectivec\r\n-(void)openWebViewWithURL:(NSString*) url urlSort:(NSString*)urlsort{\r\n    id vc =NSClassFromString(@\"FFAdvertisementSkipNewViewController\");\r\n\r\n    SEL selector = NSSelectorFromString(@\"nav2NextListViewController:urlSort:urlContent:\");\r\n\r\n    [self performMethodWithTarget:vc selector:selector withObjects:@[self,urlsort,url]];\r\n}\r\n\r\n- (void)performMethodWithTarget:(id)target selector:(SEL)selector withObjects:(NSArray *)objects\r\n{\r\n    // 方法签名(方法的描述)\r\n    NSMethodSignature *signature = [target methodSignatureForSelector:selector];\r\n    if (signature == nil) {\r\n        return;\r\n        //可以抛出异常也可以不操作。\r\n    }\r\n\r\n    // NSInvocation : 利用一个NSInvocation对象包装一次方法调用（方法调用者、方法名、方法参数、方法返回值）\r\n    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];\r\n    invocation.target = target;\r\n    invocation.selector = selector;\r\n\r\n    // 设置参数\r\n    NSInteger paramsCount = signature.numberOfArguments - 2; // 除self、_cmd以外的参数个数\r\n    if(paramsCount!=objects.count)\r\n    {\r\n        return;\r\n    }\r\n    for (NSInteger i = 0; i < paramsCount; i++) {\r\n        id object = objects[i];\r\n        if ([object isKindOfClass:[NSNull class]]) continue;\r\n        [invocation setArgument:&object atIndex:i + 2];\r\n    }\r\n\r\n    // 调用方法\r\n    [invocation invoke];\r\n}\r\n```\r\n7.待拆分子工程编译通过后，删除主工程中该模块的代码，再编译主工程\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}